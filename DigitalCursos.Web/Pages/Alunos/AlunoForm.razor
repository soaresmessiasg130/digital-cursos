<EditForm Model="@Aluno" OnValidSubmit="@OnValidSubmit">
  <DataAnnotationsValidator />
  <ValitationSummary />

  <div class="form-group row">
    <label for="nome">Nome </label>
    <div class="col-sm-4">
      <InputText @bind-Value="Aluno.Nome" class="form-control" />
      <ValidationMessage For="@(() => Aluno.Nome)" />
    </div>

    <label for="sobrenome">Sobrenome </label>
    <div class="col-sm-4">
      <InputText @bind-Value="Aluno.Sobrenome" class="form-control" />
      <ValidationMessage For="@(() => Aluno.Sobrenome)" />
    </div>
  </div>

  <div class="form-group row">
    <label for="sexo">Sexo </label>
    <div class="col-sm-4">
      <InputSelect @bind-Value="Aluno.Genero" class="form-control">
        @foreach (var genero in Enum.GetValues(typeof(Genero))) {
          <option value="@genero">@genero</option>
        }
      </InputSelect>
    </div>

    <label for="nascimento">Data de Nascimento</label>
    <div class="col-sm-4">
      <InputDate @bind-Value="Aluno.Nascimento" class="form-control" />
      <ValidationMessage For="@(() => Aluno.Nascimento)" />
    </div>
  </div>

  <div class="form-group row">
    <label for="curso">Curso </label>
    <div class="col-sm-4">
      <select @onchange="CategoriaSelectionChanged" class="form-control">
        @if (Cursos != null) {
          @foreach (var curso in Cursos) {
            <option
              value="@curso.CursoId"
              selected="@(
                curso.CursoId == Aluno.CursoId ? true : false
              )">
              @curso.CursoNome
            </option>
          }
        }
      </select>
    </div>
  </div>

  <br />

  <button
    type="submit"
    class="btn btn-success">
    @ButtonTextSubmit
  </button>

  <button
    class="btn btn-danger"
    @onclick="@(() => navigation.NavigateTo("alunos"))">
    @ButtonTextCancel
  </button>
</EditForm>

@code {
  Curso[] Cursos;

  [Inject]
  private NavigationManager navigation { get; set; }

  [Inject]
  private IAlunoService _alunoService { get; set; }

  [Inject]
  private ICursoService _cursoService { get; set; }

  [Parameter]
  public Aluno Aluno { get; set; }

  [Parameter]
  public string ButtonTextSubmit { get; set; } = "Salvar";

  [Parameter]
  public string ButtonTextCancel { get; set; } = "Cancelar";

  [Parameter]
  public EventCallback OnValidSubmit { get; set; }

  protected async override Task OnInitializedAsync () {
    await CarregaCursos ();

    if (Aluno.CursoId == 0) {
      Aluno.CursoId = Cursos[0].CursoId;
    }
  }

  private async Task CarregaCursos () {
    var res = await _cursoService.GetCursos();

    Cursos = res.ToArray();
  }

  void CategoriaSelectionChanged (ChangeEventArgs e) {
    if (int.TryParse(e.Value.ToString(), out int id)) {
      Aluno.CursoId = id;
    }
  }
}
